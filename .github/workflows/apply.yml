name: Terraform Apply (Dev)

on:
  push:
    branches: [dev]
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: dev

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate Variable Files
        run: |
          

          # Generate terraform.tfvars
          cat <<EOF > terraform.tfvars
          aws_region          = "${{ secrets.AWS_REGION }}"
          bucketname          = "${{ secrets.BUCKETNAME }}"
          ami_id              = "${{ secrets.AMI_ID }}"
          instance_type       = "${{ secrets.INSTANCE_TYPE }}"
          key_name            = "${{ secrets.KEY_NAME }}"
          public_key_path     = "${{ secrets.PUBLIC_KEY_PATH }}"
          filelocation_prtkey = "${{ secrets.FILELOCATION_PRTKEY }}"
          vpc_cidr_block      = "${{ secrets.VPC_CIDR_BLOCK }}"
          subnet_cidr_block   = "${{ secrets.SUBNET_CIDR_BLOCK }}"
          availability_zone   = "${{ secrets.AVAILABILITY_ZONE }}"
          destination         = "${{ secrets.DESTINATION }}"

          ebs_volume_size     = ${{ secrets.EBS_VOLUME_SIZE }}
          ebs_volume_type     = "${{ secrets.EBS_VOLUME_TYPE }}"

          ingress_rules = [
            { from_port = ${{ secrets.INGRESS_FROM_PORT_1 || -1 }}, to_port = ${{ secrets.TO_PORT_1 || -1 }}, protocol = "${{ secrets.INGRESS_PROTOCOL_1 }}", cidr_blocks = ["${{ secrets.INGRESS_CIDR_BLOCK_1 }}"] },
            { from_port = ${{ secrets.INGRESS_FROM_PORT_2 || -1 }}, to_port = ${{ secrets.TO_PORT_2 || -1 }}, protocol = "${{ secrets.INGRESS_PROTOCOL_2 }}", cidr_blocks = ["${{ secrets.INGRESS_CIDR_BLOCK_2 }}"] },
            { from_port = ${{ secrets.INGRESS_FROM_PORT_3 || -1 }}, to_port = ${{ secrets.TO_PORT_3 || -1 }}, protocol = "${{ secrets.INGRESS_PROTOCOL_3 }}", cidr_blocks = ["${{ secrets.INGRESS_CIDR_BLOCK_3 }}"] },
            { from_port = ${{ secrets.INGRESS_FROM_PORT_4 || -1 }}, to_port = ${{ secrets.TO_PORT_4 || -1 }}, protocol = "${{ secrets.INGRESS_PROTOCOL_4 }}", cidr_blocks = ["${{ secrets.INGRESS_CIDR_BLOCK_4 }}"] }
          ]
          EOF

          # No need to generate ingress_rules.tfvars.json anymore
          # Remove the backend-config.tfvars generation if you intend to manage backend config differently

          # Generate backend config (keeping this as it seems necessary)
          cat <<EOF > backend-config.tfvars
          bucket        = "${{ secrets.TF_BACKEND_BUCKET }}"
          key           = "${{ secrets.TF_BACKEND_KEY }}"
          region        = "${{ secrets.AWS_REGION }}"
          encrypt       = true
          use_lockfile  = "${{ secrets.USE_LOCKFILE }}"
          EOF
        working-directory: ./terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Terraform Init
        run: terraform init -backend-config=backend-config.tfvars
        working-directory: ./terraform

      - name: Terraform Format Check
        run: terraform fmt -recursive
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Cleanup
        run: rm -rf .terraform* terraform.tfstate* *.tfvars* tfplan
        working-directory: ./terraform


        ###